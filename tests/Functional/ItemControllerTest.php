<?php

namespace Tests\Functional;

use Naweown\Item;
use Naweown\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ItemControllerTest extends TestCase
{

    use DatabaseMigrations;


    public function testPageIsUpAndRunning()
    {
        $this->get('items');
        $this->assertResponseOk();
    }

    public function testItemsCanOnlyBeAddedByUsersWithAnActivatedAccount()
    {
        $this->be($this->modelFactoryFor(User::class));

        $this->post('items', $this->getValidData());

        $this->assertResponseStatus(403); //access forbidden
    }

    public function testSlugIsAutoGeneratedIfItWasProvided()
    {

    	$user = $this->modelFactoryFor(User::class);
    	$user->activateAccount();

    	$this->be($user);

        $validData = $this->getValidData();

        array_pop($validData); //remove the 'slug'index from the array

        $expectedSlug = str_slug($validData['title']);

        $this->post('items', $validData);

        $this->assertRedirectedTo('items/1');
        $this->seeInDatabase('items', ['slug' => $expectedSlug]);
    }

    public function testSlugIsNotGeneratedIfOneIsProvided()
    {
        $user = $this->modelFactoryFor(User::class);
        $user->activateAccount();

        $this->be($user);

        $validData = $this->getValidData();

        $this->post('items', $validData);

        $this->assertRedirectedTo('items/1');
        $this->seeInDatabase('items', ['slug' => array_pop($validData)]);
    }

    public function getValidData()
    {
        $validData = [
            'title' => "Some cool title",
            'description' => "THe return of the Jedi",
            'slug' => 'oops-oops'
        ];

        return $validData;
    }
}
